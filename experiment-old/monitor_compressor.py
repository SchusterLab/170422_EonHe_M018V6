from slab.instruments import Triton
from termcolor import cprint
import os, time, smtplib

addressees = ['7732559392@tmomail.net',
              'gkoolstra@uchicago.edu',
              'cssrivatsan@gmail.com',
              'yangge1987@gmail.com']

dt = 60 * 0.5

t = Triton(address="192.168.14.129")
compressor_was_off = False
recent_email_time = 0

def SendMail(to, body, verbose=False):
   gmail_user = 'electronhelium@gmail.com'
   gmail_pwd = 'alphais1/137'
   smtpserver = smtplib.SMTP("smtp.gmail.com", 587)
   smtpserver.ehlo()
   smtpserver.starttls()
   smtpserver.login(gmail_user, gmail_pwd)
   header = 'To:' + to + '\n' + 'From: ' + gmail_user + '\n' + 'Subject: Compressor information message\n'
   msg = header + '\n' + body + '\n\n'
   if verbose:
       print msg
   smtpserver.sendmail(gmail_user, to, msg)
   smtpserver.close()
   return True

print "Starting to monitor the compressor..."

while True:
    status = t.get_status()
    compressor_status = status['compressor']

    if compressor_status == 'off':
        compressor_was_off = True
        cprint("%s : WARNING compressor is off (T = %.2f K)" % \
               (time.asctime(time.localtime()), t.get_mc_temperature()), 'red')
        if (recent_email_time == 0) or (time.time() - recent_email_time > 60*10):
            for a in addressees:
                body = "The Oxford compressor has turned off. Please verify. This message was generated by Plutonium."
                SendMail(a, body, verbose=False)
                recent_email_time = time.time()
            cprint("Recipient(s) "+",".join(addressees) + " have been notified!", "magenta")
    else:
        if compressor_was_off:
            body = "The Oxford compressor has turned on again. This message was generated by Plutonium."
            for a in addressees:
                SendMail(a, body, verbose=False)
                recent_email_time = 0

        compressor_was_off = False
        cprint("%s : compressor is on! (T = %.2f K)" % \
               (time.asctime(time.localtime()), t.get_mc_temperature()), 'white')

    time.sleep(dt)